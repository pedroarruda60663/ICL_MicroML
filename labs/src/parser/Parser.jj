options {
  STATIC=false;
}

PARSER_BEGIN(Parser)

package parser;
import ast.*;
import java.util.List;
import java.util.ArrayList;

public class Parser {

}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\r"
}

TOKEN :
{
  < Num: (["0"-"9"]) + >
  |
  < PLUS : "+" >
  |
  < MINUS : "-">
  |
  < TIMES : "*">
  |
  < DIV : "/">
  |
  < LPAR : "(" >
  |
  < RPAR : ")" >
  |
  < EL: "\n" >
  |
  < FALSE: "false" >
  |
  < TRUE: "true" >
  |
  < LET: "let" >
  |
  < IN: "in" >
  |
  < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9","_"] )* >
}

TOKEN :
{
  < AND: "&&" >
  |
  < OR: "||" >
  |
  < NOT: "!" >
  |
  < LESS: "<" >
  |
  < GREATER: ">" >
  |
  < LESSEQ: "<=" >
  |
  < GREATEREQ: ">=" >
    |
  < EQ : "=" >
  |
  < EQUALS: "==" >
  |
  < NOTEQUALS: "!=" >
}


Exp Start() :
{ Exp e; }
{
  e = decl() <EL> { return e; }
}

Exp decl() :
{ List<ASTVarDecl> varDecls; Exp e; ASTVarDecl varDecl; }
{
    <LET> (varDecl = assignment() { varDecls.add(varDecl); })+ <IN> [<EL>] e = decl() { return new ASTLet(varDecls, e); }
  |
    e = BExp() { return e; }
}

ASTVarDecl assignment() :
{ Token x; Exp e; }
{
  x = <Id> <EQ> e = BExp() [<EL>] { return new ASTVarDecl(x.image, e); }
}

Exp BExp() :
{ Exp e1, e2; }
{
   e1 = Cmp()
   [ <AND> e2 = BExp() { e1 = new ASTAnd(e1,e2); }
   | <OR> e2 = BExp() { e1 = new ASTOr(e1,e2); }
   | <NOT> e2 = BExp() { e1 = new ASTNot(e2); } ]
   { return e1; }
}

Exp Cmp() :
{ Exp e1, e2; }
{
   e1 = Expr()
   [ <LESS> e2 = Expr() { e1 = new ASTLess(e1,e2); }
   | <GREATER> e2 = Expr() { e1 = new ASTGreater(e1,e2); }
   | <LESSEQ> e2 = Expr() { e1 = new ASTLessEq(e1,e2); }
   | <GREATEREQ> e2 = Expr() { e1 = new ASTGreaterEq(e1,e2); }
   | <EQUALS> e2 = Expr() { e1 = new ASTEquals(e1,e2); }
   | <NOTEQUALS> e2 = Expr() { e1 = new ASTNotEquals(e1,e2); } ]
   { return e1; }
}

Exp Expr() :
{ Exp e1, e2; }
{
   e1 = Term() 
     [ <PLUS> e2 = Expr() { e1 = new ASTAdd(e1,e2); }
     | <MINUS> e2 = Expr() { e1 = new ASTSub(e1,e2); } ]
     { return e1; }
}

Exp Term() :
{ Exp e1, e2; }
{
     e1 = Fact()
     [ <TIMES> e2 = Term() { e1 = new ASTMult(e1,e2); }
     | <DIV> e2 = Term() { e1 = new ASTDiv(e1,e2); } ]
     { return e1; }
}

Exp Fact() :
{ Token x; Exp e; }
{
      x = <Num>
  {
    return new ASTInt(Integer.parseInt(x.image));
  }
  |
      x = <TRUE> { return new ASTBool(true); }
  |
      x = <FALSE> { return new ASTBool(false); }
  |
      <LPAR> e = decl() <RPAR> { return e; }
  |
      <NOT> e = Fact() { return new ASTNot(e); }
  |
      x = <Id> { return new ASTId(x.image); }

}





















