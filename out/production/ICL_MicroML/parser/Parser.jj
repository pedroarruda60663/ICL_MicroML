options {
  STATIC=false;
}

PARSER_BEGIN(Parser)

package parser;
import ast.*;
import ast.bools.*;
import ast.declarations.*;
import ast.ints.*;
import ast.references.*;
import ast.functions.*;
import symbols.*;
import types.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;

public class Parser {

}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\r"
//| "\n"
}

TOKEN :
{
  < Num: (["0"-"9"]) + >
  |
  < PLUS : "+" >
  |
  < MINUS : "-">
  |
  < TIMES : "*">
  |
  < DIV : "/">
  |
  < LPAR : "(" >
  |
  < RPAR : ")" >
  |
  < EL: "\n" >
  |
  < FALSE: "false" >
  |
  < TRUE: "true" >
  |
  < LET: "let" >
  |
  < IN: "in" >
  |
  < NEW: "new" >
  |
  < ASSIGN: ":=" >
  |
  < DEREF: "!" >
  |
  < IF: "if" >
  |
  < THEN: "then" >
  |
  < ELSE: "else" >
  |
  < WHILE: "while" >
  |
  < DO: "do" >
  |
  < END: "end" >
  |
  <SEQ: ";" >
  |
  < PRINT: "print" | "println" >
  |
  < FUN: "fun" >
  |
  < COMMA: "," >
  |
  < ARROW: "->" >
  |
  <COLON: ":" >
  //|
  //< TYPE: "int" | "bool" | "unit" >
  |
  < INT: "int" >
  |
  < BOOL: "bool" >
  |
  < UNIT: "unit" >
  |
  < REF: "ref">
 // |
  //<FUNTYPE: (<TYPE>)* <ARROW> <TYPE> >
  |
  < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9","_"] )* >
}

TOKEN :
{
  < AND: "&&" >
  |
  < OR: "||" >
  |
  < NOT: "~" >
  |
  < LESS: "<" >
  |
  < GREATER: ">" >
  |
  < LESSEQ: "<=" >
  |
  < GREATEREQ: ">=" >
  |
  < EQ : "=" >
  |
  < EQUALS: "==" >
  |
  < NOTEQUALS: "!=" >
}


Exp Start() :
{ Exp e; }
{
  e = SeqExp() /*<EOF>*/ <EL> { return e; }
}

Exp SeqExp() :
{ Exp e1, e2;}
{
    e1 = Decl()
    ( <SEQ> e2 = SeqExp() { e1 = new ASTSeq(e1, e2); } )?
        { return e1; }
}

Exp Decl() :
{ List<ASTVarDecl> varDecls = new ArrayList<>(); Exp e; ASTVarDecl varDecl; }
{
    <LET> (varDecl = LetAssignment() { varDecls.add(varDecl); })+ <IN>  e = SeqExp() { return new ASTLet(varDecls, e); }
  |
    e = Assignment() { return e; }
  |
    e = WhileDo() { return e; }
  |
    e = IfElse() { return e; }
  |
    e = Print() { return e; }

}

Exp FunDef() :
{
  List<Pair<String, Type>> params;
  Exp body;
}
{
  <FUN> <LPAR> params = ParamList() <RPAR> <ARROW> body = SeqExp() <END> { return new ASTFunDef(params, body); }
}

List<Pair<String, Type>> ParamList() :
{
  Token id;
  Type type;
  List<Pair<String, Type>> params = new ArrayList<>();
}
{
  id = <Id> <COLON> type = Type() {params.add(new Pair<>(id.image, type));}
  ( <COMMA> id = <Id> <COLON> type = Type() { params.add(new Pair<>(id.image, type)); } )*
  { return params; }
}

//meter parenteses quando o argumento é uma função
Type Type() :
{
  Type t;
  List<Type> types = new ArrayList<>();
}
{
  <INT> { return IntType.getInstance(); }
  |
  <BOOL> { return BoolType.getInstance(); }
  |
  <UNIT> { return UnitType.getInstance(); }
  |
  <REF> t = Type() { return new RefType(t); }
  |
  <LPAR> t = Type() {types.add(t);} (<COMMA> t = Type() {types.add(t);})* <ARROW> t = Type() <RPAR> {return new FunType(types, t);}
}

Exp Print() :
{ Exp e;}
{
    <PRINT> e = Decl() {return new ASTPrint(e);}
}

Exp IfElse() :
{ Exp e1, e2, e3 = null; }
{
  <IF> <LPAR> e1 = BExp() <RPAR> <THEN>  e2 = SeqExp()  (<ELSE>  e3 = SeqExp() )? <END> { return new ASTIf(e1, e2, e3); }
}

Exp WhileDo():
{Exp e1, e2;}
{
  <WHILE> <LPAR> e1 = BExp() <RPAR> <DO>  e2 = SeqExp()  <END> { return new ASTWhile(e1, e2); }
}

ASTVarDecl LetAssignment() :
{ Token x; Exp e; }
{
  x = <Id> <EQ> e = BExp()  { return new ASTVarDecl(x.image, e); }
}

Exp Assignment() :
{ Exp e1, e2; }
{
    e1 = BExp()
    [ <ASSIGN> e2 = BExp() { e1 = new ASTAssign(e1, e2); } ]
    { return e1; }
}

Exp BExp() :
{ Exp e1, e2; }
{
    e1 = Cmp()
    [ <AND> e2 = BExp() { e1 = new ASTAnd(e1,e2); }
    | <OR> e2 = BExp() { e1 = new ASTOr(e1,e2); }
    | <NOT> e2 = BExp() { e1 = new ASTNot(e2); }
     ]
    { return e1; }
    |
    e1 = FunDef() {return e1;}

}

Exp Cmp() :
{ Exp e1, e2; }
{
   e1 = Expr()
   ( <EQUALS> e2 = Expr() { e1 = new ASTEquals(e1, e2); }
     | <NOTEQUALS> e2 = Expr() { e1 = new ASTNotEquals(e1, e2); }
     | <LESS> e2 = Expr() { e1 = new ASTLess(e1, e2); }
     | <GREATER> e2 = Expr() { e1 = new ASTGreater(e1, e2); }
     | <LESSEQ> e2 = Expr() { e1 = new ASTLessEq(e1, e2); }
     | <GREATEREQ> e2 = Expr() { e1 = new ASTGreaterEq(e1, e2); }
   )*
   { return e1; }
}

Exp Expr() :
{ Exp e1, e2; }
{
   e1 = Term() 
     ( <PLUS> e2 = Term() { e1 = new ASTAdd(e1,e2); }
     | <MINUS> e2 = Term() { e1 = new ASTSub(e1,e2); } )*
     { return e1; }
}

Exp Term() :
{ Exp e1, e2; }
{
     e1 = fcall()
     ( <TIMES> e2 = fcall() { e1 = new ASTMult(e1,e2); }
     | <DIV> e2 = fcall() { e1 = new ASTDiv(e1,e2); } )*
     { return e1; }
}

Exp fcall()  :
{Exp e;}
{
    e=Fact() (e=gets(e))*
    {return e;}
}

Exp gets(Exp exp) :
{ASTFunCall e1; Exp e2;}
{
    <LPAR>{e1 = new ASTFunCall(exp);}
    (e2=BExp() {e1.addArg(e2);}
    (","e2=BExp(){e1.addArg(e2);})*)? <RPAR>
    {return e1;}
}

Exp Fact() :
{ Token x; Exp e; }
{
      x = <Num>
  {
      return new ASTInt(Integer.parseInt(x.image));
  }
  |
      <MINUS> e = Fact()
  {
      return new ASTMult(new ASTInt(-1), e);
  }
  |
      x = <TRUE> { return new ASTBool(true); }
  |
      x = <FALSE> { return new ASTBool(false); }
  |
      <LPAR> e = Par() { return e; }
  |
      <NOT> e = Fact() { return new ASTNot(e); }
  |
      x = <Id> { return new ASTId(x.image); }
  |
      <NEW> e = Fact() { return new ASTNew(e); }
  |
      <DEREF> e = Fact() { return new ASTDeref(e); }
}

Exp Par():
{ Exp e;}
{
     <RPAR> { return new ASTUnit(); }
  |
      e = Decl() <RPAR> { return e;}
}



